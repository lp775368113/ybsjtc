<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd   ">
	<!-- 自动扫描 -->
	   <context:component-scan base-package="com.wondersgroup.**.dao,com.wondersgroup.**.service" />  
	<!-- 引入配置文件 -->
	<!-- class="自己实现的PropertyPlaceholderConfigurer" 到时候调整下PropertyConfigurer 的路径 -->
	<bean id="propertyConfigurer" class="com.wondersgroup.framework.redis.PropertyConfigurer">
		<property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:redis.properties</value>
                <value>classpath:upms.properties</value>
            </list>
        </property>
	</bean>  

    <!--1 redis数据源 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxTotal" value="${redis.maxActive}" />
        <property name="maxWaitMillis" value="${redis.maxWait}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>
    <!-- redis连接池 -->  
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg name="poolConfig" ref="poolConfig" />
        <constructor-arg name="host" value="${redis.host}" />
        <constructor-arg name="port" value="${redis.port}" type="int" />
        <constructor-arg name="timeout" value="${redis.timeout}" type="int" />
        <constructor-arg name="password" value="${redis.password}" />
    </bean>
	<!-- 使用中间类解决RedisCache.jedisConnectionFactory的静态注入，从而使MyBatis实现第三方缓存 -->
    <bean id="redisCacheTransfer" class="com.wondersgroup.framework.redis.RedisCacheTransfer">
        <property name="jedisPool" ref="jedisPool" />
    </bean>
    <!--2 oracle数据源 ， -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />		 
		<property name="initialSize" value="${initialSize}"></property>	 
		<property name="maxActive" value="${maxActive}"></property>	 
		<property name="maxIdle" value="${maxIdle}"></property>	 
		<property name="minIdle" value="${minIdle}"></property>	 
		<property name="maxWait" value="${maxWait}"></property>
	</bean>
	
	
	
   <!-- 支持JdbcTemplate -->
    <bean
		id="basicJdbcDAO"   class="org.springframework.jdbc.core.JdbcTemplate">
		<description>JdbcDAO</description>
		<property name="dataSource" ref="dataSource"/>
	</bean>

   <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">		
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" >
            <list>
                <value>classpath:com/wondersgroup/**/dao/*.xml</value>
                <value>classpath:com/wondersgroup/application/basedao/mapper/*.xml</value>
                <value>classpath:com/wondersgroup/application/basedic/dao/*.xml</value>
            </list>
        </property>		
	 	<property name="configLocation" value="classpath:SqlMapConfig.xml"/><!-- 指定Mybatis配置文件地址 -->
	</bean>
	
    <!-- mybatis spring sqlSessionTemplate,使用时直接让spring注入即可 -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
    </bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类,basePackage 可以用,隔开 -->	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<property name="basePackage" value="com.wondersgroup.**.dao,com.wondersgroup.application.basedao.dao" />
	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property> </bean>
	 
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx-->	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>
 
    <aop:config>
        <aop:pointcut id="allManagerMethod" expression="execution(* com.wondersgroup..*.service..*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod"/>        
        <aop:aspect id="logAspect" ref="aspectLog">  
        <!--配置com.spring.service包下所有类或接口的所有方法 -->  
        <aop:pointcut id="jLog" expression="execution(* com.wondersgroup..*.service..*.*(..))" />  
        <aop:after pointcut-ref="jLog" method="doLog" />  
        </aop:aspect>  
    </aop:config>
    
    <bean id="aspectLog" class="com.wondersgroup.framework.aop.OperateLog" />  

     <tx:annotation-driven/>
      
     <context:annotation-config />
     
</beans>  